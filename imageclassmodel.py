# -*- coding: utf-8 -*-
"""imageclassmodel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14tsP9yBPgEQXxPS4wUk9uFgoESv3FZMZ
"""

#DEFINE ENVIROMENT
import tensorflow as tf
import tensorflow_hub as hub
import tensorflow_datasets as tfds
import numpy as np
import numpy as np
import os
import PIL
import PIL.Image
import tensorflow as tf
import tensorflow_datasets as tfds
import pathlib



#DEFINE DATA


(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

# Rescale the images from [0,255] to the [0.0,1.0] range.
#x_train, x_test = x_train[..., np.newaxis]/255.0, x_test[..., np.newaxis]/255.0

print(len(x_train[0]) )
print(len(x_train[0][0]))
print("Number of original test examples:", len(x_test))



#reformat data
#for x in x_train:
  #x = tf.image.resize(96, 96) / 255.0

#DEFINE ML MODEL
model = tf.keras.Sequential()
#model.add(model_data)
model.add( tf.keras.layers.Flatten(input_shape=(28,28)) )
model.add( tf.keras.layers.InputLayer(input_shape=(28,28)) )
model.add( tf.keras.layers.Dense(784, activation=tf.nn.relu) )
model.add( tf.keras.layers.Dense(10, activation=tf.nn.softmax) )


#m = tf.keras.Sequential([
    #hub.KerasLayer("https://tfhub.dev/google/imagenet/mobilenet_v2_100_96/classification/4")
#])
#m.build([None, 96, 96, 3])




model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
#m.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

                         

model.summary()
#m.summary()

#TRAIN ON SAMPLE DATA
#MINIMAL TRAINING, MORE OF A TUNE UP


model.fit(x_train, y_train, epochs=20)
#m.fit(x_train, y_train, epochs=20)

#EVALUATE MODEL ON VALIDATION DATA
model.evaluate(x_test, y_test)





#SAVE MODEL

#CONVERT MODEL TO TFLITE

#INTERPERT & RUN INFERENCE